{"version":3,"file":"editor.parser.js","mappings":"mBAoEAA,QAAQC,eArDe,SAACC,GACpB,IAAIC,EAAa,GAEjB,IACID,EAAME,SAAQ,SAACC,GACX,OAAQA,EAAQC,MACZ,IAAK,YACDH,ICtBMI,EDsBkBF,EAAQG,KAAKC,MCnBjDC,EAAiB,GACrBH,EAAMI,MAAMP,SAAQ,SAACC,GACjBK,GAAkB,uWAMYL,EAAQO,QAAU,UAAY,IAAE,mNAIhCP,EAAQQ,KAAI,oFAIvCH,GDIS,MACJ,IAAK,OACDP,GEzBA,SAACI,GACjB,MAAO,QAAQA,EAAMC,KAAKM,KAAI,SFwBAA,CAAKT,GACnB,MACJ,IAAK,QACDF,GG5BC,SAACI,GAKlB,MAHc,yDACVA,EAAMQ,OAAS,KAAG,UACZR,EAAMS,MAAK,cHwBS,CAAMX,EAAQG,MAC5B,MACJ,IAAK,SACDL,GI/BE,SAACI,EAAeD,GAClC,IAAIW,EAAc,GAClB,OAAQX,GACJ,KAAK,EACDW,GAAe,OAAOV,EAAK,QAC3B,MACJ,KAAK,EACDU,GAAe,OAAOV,EAAK,QAC3B,MACJ,KAAK,EACDU,GAAe,OAAOV,EAAK,QAC3B,MACJ,KAAK,EACDU,GAAe,OAAOV,EAAK,QAC3B,MACJ,KAAK,EACDU,GAAe,OAAOV,EAAK,QAC3B,MACJ,KAAK,EACDU,GAAe,OAAOV,EAAK,QAC3B,MACJ,QACIU,GAAe,GAEvB,OAAOA,EJOuBC,CAAOb,EAAQG,KAAKK,KAAMR,EAAQG,KAAKW,OACrD,MACJ,IAAK,QACDhB,GKlCC,SAACI,GAClB,MAAO,aAAaA,EAAMa,KAAKC,IAAG,UAAUd,EAAMe,QAAO,MLiC3B,CAAMjB,EAAQG,MAC5B,MACJ,IAAK,OACDL,GMrCA,SAACI,GACjB,MAAO,YAAYA,EAAK,qBAAqBA,EAAK,ONoCpB,CAAKF,EAAQG,KAAKe,MAChC,MACJ,IAAK,OACDpB,GOxCA,SAACI,GACjB,IAAIiB,EAAY,GAUhB,OARAA,GAAa,OAEbjB,EAAMH,SAAQ,SAACK,GACXe,GAAa,OAAOf,EAAK,WAG7Be,GAAa,QP+BiBC,CAAKpB,EAAQG,KAAKC,OAChC,MACJ,IAAK,YACDN,GQ3CK,SAACI,GACtB,MAAO,MAAMA,EAAK,OR0CYmB,CAAUrB,EAAQG,KAAKK,MACrC,MACJ,IAAK,QACDV,IS9CEmB,ET8CkBjB,EAAQG,KAAKc,QS5CnC,wDT4C4CjB,EAAQG,KAAKK,KS3CjD,2DAC8BS,EAAO,6CT2C3C,MACJ,IAAK,MACDnB,GUjDD,SAACI,GAIhB,MAHe,GACHA,EV+CkBoB,CAAItB,EAAQG,KAAKoB,MAC/B,MACJ,IAAK,QACDzB,GWpDC,SAAC0B,GAClB,IAAIC,EAAc,GACdC,EAAY,GAGhBF,EAAOrB,KAAKwB,QAAQ,GAAG5B,SAAQ,SAACc,GAC5BY,GAAe,OAAOZ,EAAM,WAGhC,IAAK,IAAIe,EAAI,EAAGA,EAAIJ,EAAOrB,KAAKwB,QAAQE,OAAQD,IAC5CF,GAAa,OAEbF,EAAOrB,KAAKwB,QAAQC,GAAG7B,SAAQ,SAAC+B,GAC5BJ,GAAa,OAAOI,EAAI,WAE5BJ,GAAa,QAgBjB,MAbW,iGAIGD,EAAW,sEAIfC,EAAS,uCX0BWK,CAAM/B,GACpB,MACJ,IAAK,UACDF,GYtDT,sDADa0B,EZuDkBxB,EAAQG,MYrDb6B,MAAK,qCACrBR,EAAOS,QAAO,8BZqDf,MACJ,QACInC,GAAc,GY1DX,IAAC0B,EHAFP,ERAIf,EAGlBG,KD0DF,MAAM6B,GACJC,QAAQD,MAAMA,GAGlB,OAAOpC,I","sources":["webpack://editorjs-data-parser/./src/index.ts","webpack://editorjs-data-parser/./src/tools/checklist.ts","webpack://editorjs-data-parser/./src/tools/code.ts","webpack://editorjs-data-parser/./src/tools/embed.ts","webpack://editorjs-data-parser/./src/tools/header.ts","webpack://editorjs-data-parser/./src/tools/image.ts","webpack://editorjs-data-parser/./src/tools/link.ts","webpack://editorjs-data-parser/./src/tools/list.ts","webpack://editorjs-data-parser/./src/tools/paragraph.ts","webpack://editorjs-data-parser/./src/tools/quote.ts","webpack://editorjs-data-parser/./src/tools/raw.ts","webpack://editorjs-data-parser/./src/tools/table.ts","webpack://editorjs-data-parser/./src/tools/warning.ts"],"sourcesContent":["import {\r\n    checklist,\r\n    code,\r\n    embed,\r\n    header,\r\n    image,\r\n    link,\r\n    list,\r\n    paragraph,\r\n    quote,\r\n    raw,\r\n    table,\r\n    warning,\r\n} from './tools';\r\n\r\nconst editorJsParser = (value: any[]) => {\r\n    let editorData = '';\r\n\r\n    try {\r\n        value.forEach((element: { type?: string; data: any; }) => {\r\n            switch (element.type) {\r\n                case 'checklist':\r\n                    editorData += checklist(element.data.items);\r\n                    break;\r\n                case 'code':\r\n                    editorData += code(element);\r\n                    break;\r\n                case 'embed':\r\n                    editorData += embed(element.data);\r\n                    break;\r\n                case 'header':\r\n                    editorData += header(element.data.text, element.data.level);\r\n                    break;\r\n                case 'image':\r\n                    editorData += image(element.data);\r\n                    break;\r\n                case 'link':\r\n                    editorData += link(element.data.link);\r\n                    break;\r\n                case 'list':\r\n                    editorData += list(element.data.items);\r\n                    break;\r\n                case 'paragraph':\r\n                    editorData += paragraph(element.data.text);\r\n                    break;\r\n                case 'quote':\r\n                    editorData += quote(element.data.caption, element.data.text);\r\n                    break;\r\n                case 'raw':\r\n                    editorData += raw(element.data.html);\r\n                    break;\r\n                case 'table':\r\n                    editorData += table(element);\r\n                    break;\r\n                case 'warning':\r\n                    editorData += warning(element.data);\r\n                    break;\r\n                default:\r\n                    editorData += '';\r\n            }\r\n        });\r\n    } catch(error){\r\n        console.error(error);\r\n    }\r\n\r\n    return editorData;\r\n};\r\n\r\nexports.editorJsParser = editorJsParser;\r\n","export const checklist = (param: {\r\n    array: { checked: boolean; text: string }[];\r\n}) => {\r\n    let checklistValue = '';\r\n    param.array.forEach((element: { checked: boolean; text: string }) => {\r\n        checklistValue += `<div class=\"form-checklist\">\r\n                                <input \r\n                                    class=\"form-checklist__input\" \r\n                                    type=\"radio\" name=\"checklist\" \r\n                                    id=\"form-checklist\" \r\n                                    value=\"option1\" \r\n                                    ${element.checked ? 'checked' : ''}/>\r\n                                <label \r\n                                    class=\"form-checklist__label\" \r\n                                    for=\"form-checklist\">\r\n                                    ${element.text}\r\n                                </label>\r\n                            </div>`;\r\n    });\r\n    return checklistValue;\r\n};\r\n","export const code = (param: { data: { code: any } }) => {\r\n    return `<pre>${param.data.code}</pre>`;\r\n};\r\n","export const embed = (param: { height: number; embed: any }) => {\r\n    let embedValue = '';\r\n    embedValue += `<iframe style=\"border: none;\" width='100%' height='${\r\n        param.height + 100\r\n    }' src='${param.embed}'></iframe>`;\r\n    return embedValue;\r\n};\r\n","export const header = (param: string, type: number) => {\r\n    let headerValue = '';\r\n    switch (type) {\r\n        case 1:\r\n            headerValue += `<h1>${param}</h1>`;\r\n            break;\r\n        case 2:\r\n            headerValue += `<h2>${param}</h2>`;\r\n            break;\r\n        case 3:\r\n            headerValue += `<h3>${param}</h3>`;\r\n            break;\r\n        case 4:\r\n            headerValue += `<h4>${param}</h4>`;\r\n            break;\r\n        case 5:\r\n            headerValue += `<h5>${param}</h5>`;\r\n            break;\r\n        case 6:\r\n            headerValue += `<h6>${param}</h6>`;\r\n            break;\r\n        default:\r\n            headerValue += ''\r\n    }\r\n    return headerValue;\r\n};\r\n","export const image = (param: { file: { url: string }; caption: string }) => {\r\n    return `<img src='${param.file.url}' alt='${param.caption}'/>`;\r\n};\r\n","export const link = (param: string) => {\r\n    return `<a href='${param}' target='_blank'>${param}</a>`;\r\n};\r\n","export const list = (param: any[]) => {\r\n    let listValue = '';\r\n\r\n    listValue += `<ol>`;\r\n\r\n    param.forEach((items: any) => {\r\n        listValue += `<li>${items}</li>`;\r\n    });\r\n\r\n    listValue += `</ol>`;\r\n\r\n    return listValue;\r\n};\r\n","export const paragraph = (param: string) => {\r\n    return `<p>${param}</p>`;\r\n};\r\n","export const quote = (caption: string, text: string) => {\r\n    let quoteValue = '';\r\n    quoteValue += `<blockquote class=\"blockquote\">\r\n                    ${text}\r\n                    <footer class=\"blockquote-footer\">${caption}</footer>\r\n                 </blockquote>`;\r\n    return quoteValue;\r\n};\r\n","export const raw = (param: HTMLElement) => {\r\n    let rawValue = '';\r\n    rawValue += param;\r\n\r\n    return rawValue;\r\n};\r\n","export const table = (params: { data: { content: string[][] } }) => {\r\n    let tableHeader = '';\r\n    let tableBody = '';\r\n    let template = '';\r\n\r\n    params.data.content[0].forEach((header: string) => {\r\n        tableHeader += `<th>${header}</th>`;\r\n    });\r\n\r\n    for (let i = 1; i < params.data.content.length; i++) {\r\n        tableBody += `<tr>`;\r\n\r\n        params.data.content[i].forEach((body) => {\r\n            tableBody += `<td>${body}</td>`;\r\n        });\r\n        tableBody += `</tr>`;\r\n    }\r\n\r\n    template = `\r\n    <table class='table'>\r\n        <thead class='thead'>\r\n            <tr>\r\n                ${tableHeader}\r\n            <tr>\r\n        </thead>\r\n        <tbody>\r\n            ${tableBody}\r\n        </tbody>\r\n    </table>\r\n  `;\r\n\r\n    return template;\r\n};\r\n","export const warning = (params: { title: string; message: string }) => {\r\n    return `<figure id='figure'>\r\n                <figcaption>${params.title}</figcaption>\r\n                <p>${params.message}</p>\r\n            </figure>`;\r\n};\r\n"],"names":["exports","editorJsParser","value","editorData","forEach","element","type","param","data","items","checklistValue","array","checked","text","code","height","embed","headerValue","header","level","file","url","caption","link","listValue","list","paragraph","raw","html","params","tableHeader","tableBody","content","i","length","body","table","title","message","error","console"],"sourceRoot":""}